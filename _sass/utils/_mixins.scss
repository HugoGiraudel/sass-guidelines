/// Define the element as a container
/// @author Hugo Giraudel
@mixin container {
  max-width: 650px;
  margin-left: auto;
  margin-right: auto;
  padding-left: 1rem;
  padding-right: 1rem;
}

/// Make an element slightly overflow its container on the sides on large screens
@mixin expand {
  @include respond-to('medium') {
    margin-left: -1rem;
    margin-right: -1rem;
  }
}

/// Apply vertical rhythm
/// @author Hugo Giraudel
@mixin vertical-rhythm {
  margin-bottom: $vertical-rhythm-baseline;
}

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self (false) - Whether or not to include current selector
/// @see https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Contexts
/// @author Hugo Giraudel
/// @param {String | List} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/// Small screens helper
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) == false {
    @error "Invalid breakpoint #{$breakpoint}.";
  }

  @media all and (min-width: #{map-get($breakpoints, $breakpoint)}) {
    @content;
  }
}

/// Mixin helper to output vendor prefixes
/// @author Hugo Giraudel
/// @param {String} $property - Unprefixed CSS property
/// @param {*} $value - Raw CSS value
/// @param {List} $prefixes - List of prefixes to output
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }

  #{$property}: $value;
}
